import React from "react";
import { Link } from "react-router-dom";

// –º–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
export function StatBar({ label, value = 0 }) {
  const v = Math.max(0, Math.min(100, Number(value) || 0));
  return (
    <div className="mb-2">
      <div className="flex justify-between text-xs opacity-70 mb-1">
        <span>{label}</span><span>{v}</span>
      </div>
      <div className="h-2 rounded-full bg-white/10 overflow-hidden">
        <div
          className="h-full"
          style={{ width: `${v}%`, background: "linear-gradient(90deg, var(--accent), var(--primary))" }}
        />
      </div>
    </div>
  );
}

export function LuckyRow({ stats }) {
  if (!stats) return null;
  const hasColor = stats.lucky_color || stats.lucky_color_code;
  const hasNums = stats.lucky_numbers && stats.lucky_numbers.length;
  if (!hasColor && !hasNums) return null;

  return (
    <div className="flex flex-col gap-2 text-sm mt-3">
      {hasColor && (
        <div className="flex items-center gap-2">
          <span className="opacity-70">–°—á–∞—Å—Ç–ª–∏–≤—ã–π —Ü–≤–µ—Ç:</span>
          {stats.lucky_color_code ? (
            <span className="inline-flex items-center gap-2">
              <span
                className="inline-block w-4 h-4 rounded-md border border-white/20"
                style={{ background: stats.lucky_color_code }}
                aria-label={stats.lucky_color || stats.lucky_color_code}
              />
              <code className="opacity-90">{stats.lucky_color || stats.lucky_color_code}</code>
            </span>
          ) : (
            <span className="opacity-90">{stats.lucky_color}</span>
          )}
        </div>
      )}
      {hasNums && (
        <div className="flex items-center gap-2">
          <span className="opacity-70">–°—á–∞—Å—Ç–ª–∏–≤—ã–µ —á–∏—Å–ª–∞:</span>
          <span className="opacity-90">{stats.lucky_numbers.join(", ")}</span>
        </div>
      )}
    </div>
  );
}

function LockOverlay({ text = "–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏", to = "/login" }) {
  return (
    <div className="absolute inset-0 grid place-items-center">
      <div className="backdrop-blur-sm bg-black/20 rounded-xl border border-white/10 px-4 py-3">
        <div className="flex items-center gap-2 text-sm">
          <span aria-hidden>üîí</span>
          <span className="opacity-90">{text}</span>
          <Link className="btn-primary rounded-xl px-3 py-1 text-xs ml-2" to={to}>
            –í–æ–π—Ç–∏
          </Link>
        </div>
      </div>
    </div>
  );
}

/**
 * –ö—Ä–∞—Å–∏–≤—ã–π —Å–∞–π–¥–±–∞—Ä —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏.
 * –ü—É–±–ª–∏—á–Ω–æ: –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª" –∏ –±–ª–æ–∫ "–°—á–∞—Å—Ç–ª–∏–≤—ã–π —Ü–≤–µ—Ç/—á–∏—Å–ª–∞".
 * –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –±–ª—é—Ä–∏–º —Å –∑–∞–º–∫–æ–º.
 */
export default function ForecastStatsSidebar({
  forecast,     // –æ–±—ä–µ–∫—Ç Forecast –∏–∑ API (–æ–∂–∏–¥–∞–µ–º forecast.stats –≤–Ω—É—Ç—Ä–∏)
  isGuest,      // boolean
  loginPath = "/login",
}) {
  const stats = forecast?.stats;
  if (!stats) return null;

  const loginTo = `${loginPath}?next=${encodeURIComponent(window.location.pathname + window.location.search)}`;

  return (
    <aside className="rounded-2xl p-5 border border-white/10 bg-white/5 lg:sticky lg:top-6 h-fit">
      <h2 className="font-semibold mb-3">–ú–µ—Ç—Ä–∏–∫–∏</h2>

      {/* –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª ‚Äî –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω */}
      <StatBar label="–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª" value={stats.total_score} />

      {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –±–ª—é—Ä + –∑–∞–º–æ–∫ –¥–ª—è –≥–æ—Å—Ç–µ–π */}
      <div className="relative mt-3">
        <div className={isGuest ? "pointer-events-none filter blur-[2px] select-none" : ""}>
          <div className="grid grid-cols-2 gap-3">
            <StatBar label="–§–∏–Ω–∞–Ω—Å—ã" value={stats.finances} />
            <StatBar label="–ö–∞—Ä—å–µ—Ä–∞" value={stats.career} />
            <StatBar label="–û—Ç–Ω–æ—à–µ–Ω–∏—è" value={stats.relationship} />
            <StatBar label="–ó–¥–æ—Ä–æ–≤—å–µ" value={stats.health} />
            <StatBar label="–°–µ–º—å—è" value={stats.family} />
            <StatBar label="–î—Ä—É–∑—å—è" value={stats.friends} />
            <StatBar label="–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è" value={stats.travel} />
            <StatBar label="–§–æ—Ä–º–∞" value={stats.physique} />
            <StatBar label="–°—Ç–∞—Ç—É—Å" value={stats.status} />
          </div>
        </div>
        {isGuest && <LockOverlay to={loginTo} />}
      </div>

      {/* –°—á–∞—Å—Ç–ª–∏–≤—ã–µ: –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º */}
      <LuckyRow stats={stats} />
    </aside>
  );
}
